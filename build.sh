#!/bin/bash

# Configuration constants
BOARD="esp8266:esp8266:generic"
ACTION="--verify" # Usually this is --upload, but since we might update 2 ESPs at once we'll handle that later for efficiency's sake
ARDUINO="arduino" # Location of the arduino executable to use
INO="esp_synced_led_controller.ino" # Location of the main source file to compile
BUILD_DIR="/tmp/esp8266_arduino_builds" # Temporary directory to store build artifacts

# Derived values from the configuration constants
OUTPUT_BIN="${BUILD_DIR}/${INO}.bin"
mkdir -p ${BUILD_DIR}

# Color codes to allow us to make the output prettier and easier to read
RED='\033[0;31m'
GREEN='\033[0;32m'
WHITE='\033[0;97m'
NC='\033[0m' # No Color

# Print out a nice colored heading to help separate out various sections of the output.
function print_heading {
  heading_title=$1
  echo -e "${WHITE}--------------------${NC}"
  echo -e "${WHITE}${1}${NC}"
  echo -e "${WHITE}--------------------${NC}"
}

################################################################################
# Actual script starts running here 
################################################################################

# First compile the .ino for ESP8266 using the Arduino IDE from the command line
print_heading "COMPILING..."
JAVA_TOOL_OPTIONS='-Djava.awt.headless=true' "${ARDUINO}" "${ACTION}" "${INO}" --board "${BOARD}"  --pref build.path="${BUILD_DIR}" # --verbose
err=$?
if [ ${err} -ne 0 ]; then
  echo -e "${RED}ERROR!${NC}\t(${INO} Failed to compile).  Unable to continue to uploading step, exiting now."
  exit $err 
else
  echo -e "${GREEN}SUCCESS!${NC}\t(${INO} compiled without errors.)"
fi
echo


# Now upload the binary to each ESP8266 we can find
print_heading "UPLOADING..."

# First look for all the /dev/ttyUSB* devices and put them in an array so we
# can scan through them and see if they're ESP's
shopt -s nullglob # This makes an empty glob still create a legal, empty array
serial_devices=(/dev/ttyUSB*)
echo "USB serial devices found: [${serial_devices[@]}]"

# TODO - use the array built above to do this in a cleaner way!!
if [ ${#serial_devices[@]} -eq 0 ]; then
    echo -e "${RED}ERROR${NC}\tCan't attempt to upload -- no devices found."
    echo "I don't see any /dev/ttyUSB* devices.  Are you sure you've got an esp hooked up?"
    exit -1
else
  pids_to_wait_for=""
  echo "Spawning uploading process for each ESP8266 we can find:"
  for PORT in "${serial_devices[@]}"
  do
    echo -n "	Starting ${PORT}..."
    # Note: this line was generated by copy/pasting what the arduino IDE does when updating.  If something changes, just
    # change --verify to --upload (and add --verbose) and run it once.  Look for the line like this that uploads the program and replace it here.
    (~/.arduino15/packages/esp8266/tools/esptool/0.4.9/esptool -vv -cd ck -cb 115200 -cp ${PORT} -ca 0x00000 -cf ${OUTPUT_BIN} 1> /dev/null) &
    pid=$!
    echo "	STARTED (pid:${pid})"
    pids_to_wait_for="${pid} ${pids_to_wait_for}"
  done

  # wait for all pids
  echo "All upload subprocesses spawned.  Waiting for them to complete..."
  upload_error_detected=0
  for pid in ${pids_to_wait_for[@]}; do
      echo -n "	Waiting for pid ${pid}..."
      wait $pid
      ret_code=$?
      if [ ${ret_code} -ne 0 ]; then
        upload_error_detected=1
        echo -ne "${RED}" 
      else
        echo -ne "${GREEN}" 
      fi
      echo -e "	DONE (return code: ${ret_code})${NC}"
  done
  echo "All upload subprocesses completed."

  if [ ${upload_error_detected} -eq 1 ]; then
    echo -e "${RED}ERROR:  At least one upload subprocess failed!${NC}"
  else
    echo -e "${GREEN}SUCCESS:  All upload subprocess succeded!${NC}"
  fi
fi

